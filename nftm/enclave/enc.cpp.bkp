// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

#include <stdio.h>
#include <openssl/evp.h>
#include <openssl/sha.h>
#include <openssl/err.h>
#include <iostream>
#include <string>
#include <cassert>
#include <cstddef>
#include <cstdint>
#include <memory>  
#include <cassert>
#include <vector>
#include <cstring>
#include <sys/random.h>
#include <secp256k1_recovery.h>
#include <sstream>
#include <unordered_map>
#include <sys/time.h>

#include "nftm_t.h"

using std::uint8_t;
using std::uint64_t;
using std::size_t;
using std::vector;



typedef vector<std::uint8_t> Bytes;

#define SHA3_256_DIGEST_LENGTH 32

static std::string to_lower(std::string str) {

    std::string upTxt = str;

    for (int i = 0; i < upTxt.length(); i++)
  	{
  		upTxt[i] = tolower(upTxt[i]);
  	}

    return upTxt;
}

static int fill_random(unsigned char* data, size_t size) {
    ssize_t res = getrandom(data, size, 0);
    if (res < 0 || (size_t)res != size ) {
        return 0;
    } else {
        return 1;
    }
}

static void print_hex(unsigned char* data, size_t size) {
    size_t i;
    printf("0x");
    for (i = 0; i < size; i++) {
        printf("%02x", data[i]);
    }
    printf("\n");
}

static std::string get_string_hex(unsigned char* data, size_t size) {

    char converted[size*2 + 1];
    for(size_t i = 0; i < size; i++) {
        sprintf(&converted[i*2], "%02x", data[i]);
    }
    std::string result = &converted[0];

    return result;
}

Bytes asciiBytes(const char *str) {
	return Bytes(str, str + std::strlen(str));
}

Bytes hexBytes(const char *str) {
	Bytes result;
	size_t length = std::strlen(str);
	assert(length % 2 == 0);
	for (size_t i = 0; i < length; i += 2) {
		unsigned int temp;
		std::sscanf(&str[i], "%02x", &temp);
		result.push_back(static_cast<std::uint8_t>(temp));
	}
	return result;
}

class Keccak256 final {
	
	public: static constexpr int HASH_LEN = 32;
	private: static constexpr int BLOCK_SIZE = 200 - HASH_LEN * 2;
	private: static constexpr int NUM_ROUNDS = 24;
	
	
    public: static void getHashHelper(std::string message, std::uint8_t hashResult[HASH_LEN]);

    public: static void getHash(const std::uint8_t msg[], std::size_t len, std::uint8_t hashResult[HASH_LEN]);
	
	private: static void absorb(std::uint64_t state[5][5]);
	
	
	// Requires 0 <= i <= 63
	private: static std::uint64_t rotl64(std::uint64_t x, int i);
	
	
	Keccak256() = delete;  // Not instantiable
	
	
	private: static const unsigned char ROTATION[5][5];
	
};


void Keccak256::getHashHelper(std::string message, std::uint8_t hashResult[HASH_LEN]) {

    Bytes message_prefix = asciiBytes("\x19""Ethereum Signed Message:\n");
    Bytes sample_data = asciiBytes(message.c_str());
    Bytes sample_data_size = asciiBytes(std::to_string(message.size()).c_str());
    message_prefix.insert(message_prefix.end(), sample_data_size.begin(), sample_data_size.end());
    message_prefix.insert(message_prefix.end(), sample_data.begin(), sample_data.end());

    Keccak256::getHash(message_prefix.data(), message_prefix.size(), hashResult);
}

void Keccak256::getHash(const uint8_t msg[], size_t len, uint8_t hashResult[HASH_LEN]) {
	assert((msg != nullptr || len == 0) && hashResult != nullptr);
	uint64_t state[5][5] = {};
	
	// XOR each message byte into the state, and absorb full blocks
	int blockOff = 0;
	for (size_t i = 0; i < len; i++) {
		int j = blockOff >> 3;
		state[j % 5][j / 5] ^= static_cast<uint64_t>(msg[i]) << ((blockOff & 7) << 3);
		blockOff++;
		if (blockOff == BLOCK_SIZE) {
			absorb(state);
			blockOff = 0;
		}
	}
	
	// Final block and padding
	{
		int i = blockOff >> 3;
		state[i % 5][i / 5] ^= UINT64_C(0x01) << ((blockOff & 7) << 3);
		blockOff = BLOCK_SIZE - 1;
		int j = blockOff >> 3;
		state[j % 5][j / 5] ^= UINT64_C(0x80) << ((blockOff & 7) << 3);
		absorb(state);
	}
	
	// Uint64 array to bytes in little endian
	for (int i = 0; i < HASH_LEN; i++) {
		int j = i >> 3;
		hashResult[i] = static_cast<uint8_t>(state[j % 5][j / 5] >> ((i & 7) << 3));
	}
}


void Keccak256::absorb(uint64_t state[5][5]) {
	uint64_t (*a)[5] = state;
	uint8_t r = 1;  // LFSR
	for (int i = 0; i < NUM_ROUNDS; i++) {
		// Theta step
		uint64_t c[5] = {};
		for (int x = 0; x < 5; x++) {
			for (int y = 0; y < 5; y++)
				c[x] ^= a[x][y];
		}
		for (int x = 0; x < 5; x++) {
			uint64_t d = c[(x + 4) % 5] ^ rotl64(c[(x + 1) % 5], 1);
			for (int y = 0; y < 5; y++)
				a[x][y] ^= d;
		}
		
		// Rho and pi steps
		uint64_t b[5][5];
		for (int x = 0; x < 5; x++) {
			for (int y = 0; y < 5; y++)
				b[y][(x * 2 + y * 3) % 5] = rotl64(a[x][y], ROTATION[x][y]);
		}
		
		// Chi step
		for (int x = 0; x < 5; x++) {
			for (int y = 0; y < 5; y++)
				a[x][y] = b[x][y] ^ (~b[(x + 1) % 5][y] & b[(x + 2) % 5][y]);
		}
		
		// Iota step
		for (int j = 0; j < 7; j++) {
			a[0][0] ^= static_cast<uint64_t>(r & 1) << ((1 << j) - 1);
			r = static_cast<uint8_t>((r << 1) ^ ((r >> 7) * 0x171));
		}
	}
}


uint64_t Keccak256::rotl64(uint64_t x, int i) {
	return ((0U + x) << i) | (x >> ((64 - i) & 63));
}


// Static initializers
const unsigned char Keccak256::ROTATION[5][5] = {
	{ 0, 36,  3, 41, 18},
	{ 1, 44, 10, 45,  2},
	{62,  6, 43, 15, 61},
	{28, 55, 25, 21, 56},
	{27, 20, 39,  8, 14},
};

std::string recover_public_key(const std::string message, const std::string signature) {
    std::uint8_t message_hash[Keccak256::HASH_LEN];
    Keccak256::getHashHelper(message, message_hash);


    //printf("\n The hash of the message %s is :", message.c_str());
    // for (int i = 0; i < Keccak256::HASH_LEN; i++) {
    //             printf("%02x", message_hash[i]);
    // }

    //printf("\n\n");

    secp256k1_ecdsa_recoverable_signature sig;

    /* Before we can call actual API functions, we need to create a "context". */
    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);
    unsigned char randomize[32];

    if (!fill_random(randomize, sizeof(randomize))) {
        printf("Failed to generate randomness\n");
        return "Failed";
    }
    /* Randomizing the context is recommended to protect against side-channel
     * leakage See `secp256k1_context_randomize` in secp256k1.h for more
     * information about it. This should never fail. */
    int return_val = secp256k1_context_randomize(ctx, randomize);
    assert(return_val);


    // Parse the signature
    std::string recovery_id = signature.substr( signature.length() - 2 );
    int rec_id;

    std::stringstream rss;
    rss << std::hex << recovery_id;
    rss >> rec_id;

    rec_id -= 27;

    std::string actual_sig = signature.substr(2, signature.length() - 2);

    Bytes sig_bytes = hexBytes(actual_sig.data());

    unsigned char sig_bytes_arr[64];

    std::copy(sig_bytes.begin(), sig_bytes.end(), sig_bytes_arr);

    secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &sig, sig_bytes_arr, rec_id);


    secp256k1_pubkey pubkey;

    if (!secp256k1_ecdsa_recover(ctx, &pubkey, &sig, message_hash)) {
	printf("Failed to recover the public key !!!!");
    	return "Failed to recover public key";
    }


    unsigned char uncompressed_pubkey[65];

    size_t len = sizeof(uncompressed_pubkey);
    return_val = secp256k1_ec_pubkey_serialize(ctx, uncompressed_pubkey, &len, &pubkey, SECP256K1_EC_UNCOMPRESSED);
    assert(return_val);

    //printf("Public Key: ");
    //print_hex(uncompressed_pubkey, sizeof(uncompressed_pubkey));

    // Get the user address from the public key
    //1. remove the first byte from the public key
    unsigned char uncompressed_pubkey_new[64];

    for (int i = 0; i < 64; i++) {
        uncompressed_pubkey_new[i] = uncompressed_pubkey[i+1];
    }

    // 2. Keccak-256 this slice
    std::uint8_t keyHash[Keccak256::HASH_LEN];

    Keccak256::getHash(uncompressed_pubkey_new, 64, keyHash);

    //3. Get the last 20 bytes from the hash
    std::uint8_t address_bytes[20];
    for (int i = 0; i < 20; i++) {
        address_bytes[i] = keyHash[i+12];
    }

    //printf("Recovered address is : ");
    //print_hex(address_bytes, sizeof(address_bytes));

    std::string address = "0x" + get_string_hex(address_bytes, sizeof(address_bytes));

    return address;
}

std::string get_secp256k1_signature(const std::string message, const std::string key, std::string &address) {
    std::uint8_t message_hash[Keccak256::HASH_LEN];
    Keccak256::getHashHelper(message, message_hash);


    //printf("\n The hash of the message %s is :", message.c_str());
    // for (int i = 0; i < Keccak256::HASH_LEN; i++) {
    //             printf("%02x", message_hash[i]);
    // }

    //printf("\n\n");

    secp256k1_ecdsa_recoverable_signature sig;
    /* Before we can call actual API functions, we need to create a "context". */
    secp256k1_context* ctx = secp256k1_context_create(SECP256K1_CONTEXT_NONE);
    unsigned char randomize[32];

    if (!fill_random(randomize, sizeof(randomize))) {
        printf("Failed to generate randomness\n");
        return "Failed";
    }
    /* Randomizing the context is recommended to protect against side-channel
     * leakage See `secp256k1_context_randomize` in secp256k1.h for more
     * information about it. This should never fail. */
    int return_val = secp256k1_context_randomize(ctx, randomize);
    assert(return_val);

    Bytes key_bytes = hexBytes(key.data());

    unsigned char key_arr[32];

    std::copy(key_bytes.begin(), key_bytes.end(), key_arr);


    /*** Signing ***/

    /* Generate an ECDSA signature `noncefp` and `ndata` allows you to pass a
     * custom nonce function, passing `NULL` will use the RFC-6979 safe default.
     * Signing with a valid context, verified secret key
     * and the default nonce function should never fail. */
    return_val = secp256k1_ecdsa_sign_recoverable(ctx, &sig, message_hash, key_arr, NULL, NULL);
    assert(return_val);

    /* Serialize the signature in a compact form. Should always return 1
     * according to the documentation in secp256k1.h. */

    unsigned char serialized_signature[64];

    int rec_id;
    return_val = secp256k1_ecdsa_recoverable_signature_serialize_compact(ctx, serialized_signature, &rec_id, &sig);
    assert(return_val);

    /*** Verification ***/

    /* Deserialize the signature. This will return 0 if the signature can't be parsed correctly. */
    if (!secp256k1_ecdsa_recoverable_signature_parse_compact(ctx, &sig, serialized_signature, rec_id)) {
        printf("Failed parsing the signature\n");
        return "Failed to parse the signature";
    }

    secp256k1_pubkey pubkey;

    if (!secp256k1_ecdsa_recover(ctx, &pubkey, &sig, message_hash)) {
	printf("Failed to recover the public key !!!!");
    	return "Failed to recover public key";
    }


    unsigned char uncompressed_pubkey[65];

    size_t len = sizeof(uncompressed_pubkey);
    return_val = secp256k1_ec_pubkey_serialize(ctx, uncompressed_pubkey, &len, &pubkey, SECP256K1_EC_UNCOMPRESSED);
    assert(return_val);

    // print_hex(key_arr, sizeof(key_arr));
    // printf("Public Key: ");
    // print_hex(uncompressed_pubkey, sizeof(uncompressed_pubkey));
    // printf("Signature: ");
    // print_hex(serialized_signature, sizeof(serialized_signature));
    // printf("RecoveryID: ");
    // printf("%d\n", rec_id);

    /* This will clear everything from the context and free the memory */
    secp256k1_context_destroy(ctx);

    // Get the user address from the public key
    //1. remove the first byte from the public key
    unsigned char uncompressed_pubkey_new[64];

    for (int i = 0; i < 64; i++) {
        uncompressed_pubkey_new[i] = uncompressed_pubkey[i+1];
    }

    // 2. Keccak-256 this slice
    std::uint8_t keyHash[Keccak256::HASH_LEN];

    Keccak256::getHash(uncompressed_pubkey_new, 64, keyHash);

    //3. Get the last 20 bytes from the hash
    std::uint8_t address_bytes[20];
    for (int i = 0; i < 20; i++) {
        address_bytes[i] = keyHash[i+12];
    }

    // printf("Recovered address is : ");
    // print_hex(address_bytes, sizeof(address_bytes));

    address = "0x" + get_string_hex(address_bytes, sizeof(address));
    address.resize(42);

    // Full Signature
    // append with 27 + recovery_id

    std::stringstream sstream;
    sstream << std::hex << rec_id + 27;
    std::string lastbyte = sstream.str();

    std::string partial_signature = get_string_hex(&serialized_signature[0], sizeof(serialized_signature));
    std::string full_signature = "0x" + partial_signature + lastbyte;

    return full_signature;
}


std::string verifier_addr = "0x9a932e12B60cE08b891710e100Ed80bb0b2E63ba";
std::string tee_private_key = "-----------";
std::string tee_addr = "0x89a438ED2BE2ED4DFe8fA27e925c348C1e4E2414";

std::unordered_map<int, std::string> nft_ownership;
std::unordered_map<std::string, int> proxyWalletBalances;

struct Transaction {
    unsigned nft_id;
    unsigned price;
    std::string buyer;
    std::string seller;
    std::string signature; // used to identify the txn.
};

std::unordered_map<int, vector<Transaction>> pendingTransactions;

// data format: "a:1;b:2;c:3"

void populate_data (std::string data) {

    // free map
    nft_ownership.clear();

    std::string token;
    std::string delimiter = ",";

    size_t pos;

    while ((pos = data.find(delimiter)) != std::string::npos) {
        token = data.substr(0, pos);
        size_t posx = token.find(":");

// a a : 1 1
// 0 1 2 3 4

        nft_ownership.insert(std::make_pair<int, std::string>(std::stoi(token.substr(posx + 1, token.size() - posx - 1)), token.substr(0, posx)));
        data.erase(0, pos + 1);
    }

    token = data.substr(0, pos);
    size_t posx = token.find(":");
    nft_ownership.insert(std::make_pair<int, std::string>(std::stoi(token.substr(posx + 1, token.size() - posx - 1)), token.substr(0, posx)));
    data.erase(0, pos + 1);
}

void print_nft_owership_data() {
    std::cout<<"-------NFT status-------"<<std::endl;
    for (auto const &pair: nft_ownership) {
        std::cout << "{" << pair.first << ": " << pair.second << "}\n";
    }
    std::cout<<"---------------------"<<std::endl;
}

void print_proxy_wallet_balances() {
    std::cout<<"-------Proxy Wallet balances-------"<<std::endl;
    for (auto const &pair: proxyWalletBalances) {
        std::cout << "{" << pair.first << ": " << pair.second << "}\n";
    }
    std::cout<<"---------------------"<<std::endl;
}

void print_pending() {
    std::cout<<"-------Pending Final Sections-------"<<std::endl;
    for (auto const &pair: pendingTransactions) {
        std::cout << "{ id: " << pair.first;
        std::cout << "[ ";
        for (const Transaction t : pair.second) {
            std::cout << "{ " << t.buyer << " - " <<  t.seller << " - " << t.price << " - " << t.signature << " }, ";
        }
        std::cout << " ]";
    }
    std::cout<<"\n---------------------"<<std::endl;
}

std::unordered_map<std::string, int> user_seq_nums;

// internal nft ids start form 10000
int internal_nft_id = 10000;

void enclave_mint_nft(const char* token_uri, size_t token_uri_size, 
        const char* signature, size_t sig_size, const char* address, size_t address_size) {
    printf("Minting NFT off-chain\n");

    // struct timeval stop, start;
    // gettimeofday(&start, NULL);

    int seq_num = 0;

    std::string user_addr(address, address_size);
    if (auto n = user_seq_nums.find(user_addr); n != user_seq_nums.end()) {
        seq_num = n->second;
    }

    std::string expected_message = "mint,seq_num:" + std::to_string(seq_num);
    std::string signature_str(signature, sig_size);

    
    
    std::string recovered_addr = recover_public_key(expected_message, signature_str);

    


    // verify signature (signer and message)
    if (strcasecmp(recovered_addr.c_str(), user_addr.c_str()) != 0) {
        std::string tee_message = "Invalid Signature for :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // add owner ship and update internal counter
    nft_ownership.insert(std::make_pair<int, std::string>(internal_nft_id++, user_addr.c_str()));

    // increase seq num
    user_seq_nums[user_addr]++;

    std::string tee_message = "Success :: " + expected_message;
    std::string tee_address;
    std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);
    // gettimeofday(&stop, NULL);
    
    // printf("Time measured: %ld micro seconds.\n", stop.tv_usec - start.tv_usec);
    oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());
}

struct Listing {
    int nft_id;
    unsigned price;
    std::string buyer_address;
};

std::unordered_map<int, Listing> listings;

void print_listings() {
    std::cout<<"-------Listings-------"<<std::endl;
    for (auto const &pair: listings) {
        std::cout << "{" << pair.first << ": [ price: " << pair.second.price << ", buyer: " << pair.second.buyer_address << "]}\n";
    }
    std::cout<<"---------------------"<<std::endl;
}

void enclave_list_nft(const char* signature, size_t sig_size, 
            const char* address, size_t address_size, int nft_id, unsigned price, 
            const char* buyer_address, size_t buyer_address_size) {
    
    printf("Adding a listing\n");
    int seq_num = 0;

    struct timeval stop, start;
    gettimeofday(&start, NULL);

    std::string user_addr(address, address_size);
    if (auto n = user_seq_nums.find(user_addr); n != user_seq_nums.end()) {
        seq_num = n->second;
    }

    std::string buyer_address_str(buyer_address, buyer_address_size);
    std::string expected_message = "list,buyer:" + buyer_address_str + ",nft_id:" + std::to_string(nft_id) + 
                ",price:" + std::to_string(price) +  
                + ",seq_num:" + std::to_string(seq_num);
    std::string signature_str(signature, sig_size);
    std::string recovered_addr = recover_public_key(expected_message, signature_str);

    // verify signature (signer and message)
    if (strcasecmp(recovered_addr.c_str(), user_addr.c_str()) != 0) {
        std::string tee_message = "Invalid Signature for :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // Check if the NFT exists
    if (nft_ownership.find(nft_id) == nft_ownership.end()) {
        std::string tee_message = "NFT doesn't exist :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // Check ownership in the offchain
    if (strcasecmp(recovered_addr.c_str(), nft_ownership[nft_id].c_str()) != 0) {
        std::string tee_message = "You are not the owner of the NFT :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // create or update a listing

    Listing listing;
    listing.nft_id = nft_id;
    listing.price = price;
    listing.buyer_address = buyer_address_str;

    listings[nft_id] = listing;

    // increase seq num
    user_seq_nums[user_addr]++;

    std::string tee_message = "Success :: " + expected_message;
    std::string tee_address;
    std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

    gettimeofday(&stop, NULL);
    printf("Time measured: %ld micro seconds.\n", stop.tv_usec - start.tv_usec);

    oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());
}


void enclave_buy_nft(const char* signature, size_t sig_size, const char* address, size_t address_size, int nft_id) {
    printf("Initiating purchase\n");

    struct timeval stop, start;
    gettimeofday(&start, NULL);

    int seq_num = 0;

    std::string user_addr(address, address_size);
    if (auto n = user_seq_nums.find(user_addr); n != user_seq_nums.end()) {
        seq_num = n->second;
    }

    // check if the nft_id is listed
    if (listings.find(nft_id) == listings.end()) {
        std::string expected_message = "buy,nft_id:" + std::to_string(nft_id) + 
                                   ",seq_num:" + std::to_string(seq_num);
        std::string tee_message = "NFT is not listed :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // check the buyers signature
     std::string expected_message = "buy,nft_id:" + std::to_string(nft_id) + 
                                ",price:" + std::to_string(listings[nft_id].price)
                                +   ",seq_num:" + std::to_string(seq_num);

    std::string signature_str(signature, sig_size);
    std::string recovered_addr = recover_public_key(expected_message, signature_str);

    if (strcasecmp(recovered_addr.c_str(), user_addr.c_str()) != 0) {
        std::string tee_message = "Invalid Signature for :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // no self buys allowed
    if (strcasecmp(nft_ownership[nft_id].c_str(), user_addr.c_str()) == 0) {
        std::string tee_message = "Self buy not allowed :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // check any private listing

    if (strcasecmp(recovered_addr.c_str(), listings[nft_id].buyer_address.c_str()) != 0 
        && listings[nft_id].buyer_address != "any") {
        std::string tee_message = "Listed for someone else :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }


    // check if the buyer has enough funds
    if (proxyWalletBalances[to_lower(user_addr)] < listings[nft_id].price) {
        std::string tee_message = "Not enough funds :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    // increase seq num
    user_seq_nums[user_addr]++;

    std::string tee_message = "Success :: " + expected_message;
    std::string tee_address;
    std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

    // Add to pending list
    Transaction transaction;
    transaction.nft_id = nft_id;
    transaction.price = listings[nft_id].price;
    transaction.buyer = user_addr;
    transaction.seller = nft_ownership[nft_id];
    transaction.signature = tee_signature;

    pendingTransactions[nft_id].push_back(transaction);

    // transfer NFT
    proxyWalletBalances[to_lower(user_addr)] -= listings[nft_id].price;
    proxyWalletBalances[to_lower(nft_ownership[nft_id])] += listings[nft_id].price;
    nft_ownership[nft_id] = user_addr;

    // remove listing
    listings.erase(nft_id);

    gettimeofday(&stop, NULL);
    printf("Time measured: %ld micro seconds.\n", stop.tv_usec - start.tv_usec);

    // call the host and request for a smartcontract call
    oe_result_t result = host_propogate_buy(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());
}

void enclave_update_transaction_status(const char* signature, size_t sig_size,
            const char* tee_signature, size_t tee_signature_size, int nft_id, 
            const char* status, size_t status_size) {


    std::string tee_signature_str(tee_signature, tee_signature_size);
    std::string status_str(status, status_size);
    
    std::string expected_message = tee_signature_str + std::to_string(nft_id) + status_str;

    std::string signature_str(signature, sig_size);

    
    // Verify the verfier's signature
    std::string recovered_addr = recover_public_key(expected_message, signature_str);

    if (strcasecmp(recovered_addr.c_str(), verifier_addr.c_str()) != 0) {
        oe_result_t result = host_propogate("NA", 2, "Invalid Signature", 17);
        return;
    }

    if (pendingTransactions.find(nft_id) == pendingTransactions.end() || 
            pendingTransactions[nft_id].size() == 0) {
        std::string tee_message = "Transaction no longer pending :: " + expected_message;
        std::string tee_address;
        std::string tee_signaturex = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signaturex.c_str(), tee_signaturex.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    if (pendingTransactions[nft_id][0].signature != tee_signature) {
        std::string tee_message = "Out of order status :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }

    std::string s = "success";



    if (status_str == s) {
        pendingTransactions[nft_id].erase(pendingTransactions[nft_id].begin());
        std::string tee_message = "Success :: " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;
    }



    if (status_str.rfind("fail,owner=", 0) == 0) {
        std::string owner = status_str.substr(11);


        for(auto mit = pendingTransactions[nft_id].begin(); mit != pendingTransactions[nft_id].end(); )
        {   
            // stop if we reach the owner
            if (owner == mit->seller)
                break;

            // revert the balances
            proxyWalletBalances[mit->seller] -= mit->price;
            proxyWalletBalances[mit->buyer] += mit->price;
            // remove the txn
            mit = pendingTransactions[nft_id].erase(mit);
        }

        // update ownership
        if (pendingTransactions[nft_id].size() == 0) {
            nft_ownership[nft_id] = owner;
        }

        std::string tee_message = "Failed on-chain txn :: owner is: " + owner + " -- " + expected_message;
        std::string tee_address;
        std::string tee_signature = get_secp256k1_signature(tee_message, tee_private_key, tee_address);

        oe_result_t result = host_propogate(tee_signature.c_str(), tee_signature.size(), tee_message.c_str(), tee_message.size());

        return;

    }

}


unsigned int verifier_seq_num = 0;

void enclave_update_wallet_balances(const char* signature, size_t sig_size, 
        const char* address, size_t address_size, int balance, unsigned seq_num) {
    printf("Updating Wallet Balance\n");

    // verify signature
    std::string address_str(address, address_size);
    std::string data_str = "address:" + address_str + ",balance:" + std::to_string(balance) + ",seq_num:" + 
                std::to_string(seq_num);
    std::string signature_str(signature, sig_size);
    
    std::string recovered_addr = recover_public_key(data_str, signature_str);

    if (strcasecmp(recovered_addr.c_str(), verifier_addr.c_str()) != 0) {
        oe_result_t result = host_propogate("NA", 2, "Invalid Signature", 17);
        return;
    }

    // verify Seq number
    if (seq_num < verifier_seq_num) {
        std::string msg = "Invalid Verifier Sequence Number";
        oe_result_t result = host_propogate("NA", 2, msg.c_str(), msg.size());
        return;
    }

    std::cout << "Verfied the verifier addr" << std::endl;
    
    proxyWalletBalances[to_lower(address_str)] = balance;
    verifier_seq_num = seq_num + 1;

    // Call back into the host
    oe_result_t result = host_propogate("NA", 2, "Success", 7);
    if (result != OE_OK)
    {
        printf(
            "Call to host_propogate failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
    }
}

void enclave_update_nft_status(const char* data, size_t data_size, const char* signature, size_t sig_size)
{
    printf("Updating NFT status\n");

    // verify the signature

    std::string data_str(data, data_size);
    std::string signature_str(signature, sig_size);
    
    std::string recovered_addr = recover_public_key(data_str, signature_str);

    if (strcasecmp(recovered_addr.c_str(), verifier_addr.c_str()) != 0) {
        oe_result_t result = host_propogate("NA", 2, "Invalid Signature", 17);
        return;
    }

    std::cout << "Verfied the verifier addr" << std::endl;

    populate_data(data_str);

    // Call back into the host
    oe_result_t result = host_propogate("NA", 2, "Success", 7);
    if (result != OE_OK)
    {
        printf(
            "Call to host_propogate failed: result=%u (%s)\n",
            result,
            oe_result_str(result));
    }
}
